{"version":3,"sources":["ThemeContext.js","theme.js","App.js","index.js"],"names":["ThemeToggleContext","createContext","toggle","CustomThemeProvider","children","useState","mode","themeState","setThemeState","Provider","value","theme","textColor","light","dark","buttonBackgroundColor","Wrapper","styled","div","LoadedWrapper","LoadingWrapper","Title","h1","Quote","Button","button","withTheme","props","themeToggle","useContext","loading","setLoading","character","setCharacter","quote","setQuote","useEffect","setTimeout","randomQuote","selectForce","data","starWarsQuotes","array","force","a","filterForce","filter","item","toLowerCase","characterSelect","randomItem","selectQuote","quotes","Math","floor","random","length","newQuote","className","name","onClick","size","color","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+nFAGMA,G,MAAqBC,wBAAc,CACvCC,OAAQ,gBA4BKC,EAvBa,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACRC,mBAAS,CAC3CC,KAAM,SAFoC,mBACrCC,EADqC,KACzBC,EADyB,KAU5C,OACE,kBAACR,EAAmBS,SAApB,CAA6BC,MAAO,CAAER,OANzB,WACb,IAAMI,EAA2B,UAApBC,EAAWD,KAAmB,OAAS,QACpDE,EAAc,CAAEF,KAAMA,OAKpB,kBAAC,IAAD,CACEK,MAAO,CACLL,KAAMC,EAAWD,OAGnB,6BAAMF,M,iBCvBDQ,EAAYD,IAAM,OAAQ,CACrCE,MAAO,OACPC,KAAM,QAGKC,EAAwBJ,IAAM,OAAQ,CACjDE,MAAO,OACPC,KAAM,S,ozCCER,IA8DME,EAAUC,IAAOC,IAAV,KAWPC,EAAgBF,IAAOC,IAAV,KAQbE,EAAiBH,YAAOE,EAAPF,CAAH,KAOdI,EAAQJ,IAAOK,GAAV,KAKLC,EAAQN,IAAOC,IAAV,IAIKN,GAOVY,EAASP,IAAOQ,OAAV,IACUV,GAcPW,eAvHH,SAACC,GACX,IAAMC,EFN6BC,qBAAW7B,GEKzB,EAGSK,oBAAS,GAHlB,mBAGdyB,EAHc,KAGLC,EAHK,OAIa1B,mBAAS,IAJtB,mBAId2B,EAJc,KAIHC,EAJG,OAKK5B,mBAAS,IALd,mBAKd6B,EALc,KAKPC,EALO,KAOrBC,qBAAU,WACRC,YAAW,kBAAMN,GAAW,KAAO,KACnCO,MACC,CAACX,EAAMhB,MAAML,OAEhB,IAAMgC,EAAc,WAClBC,EAAYC,EAAKC,eAAgBd,EAAMhB,MAAML,OAGzCiC,EAAW,uCAAG,WAAOG,EAAOC,GAAd,iBAAAC,EAAA,sDACdC,EAAcH,EAAMI,QAAO,SAACC,GAAD,OAAUA,EAAKJ,MAAMK,gBAAkBL,KAClEM,EAAkBC,EAAWL,GACjCZ,EAAagB,GACbE,EAAYF,EAAgBG,QAJV,2CAAH,wDAOXF,EAAa,SAACR,GAClB,OAAOA,EAAMW,KAAKC,MAAMD,KAAKE,SAAWb,EAAMc,UAG1CL,EAAc,SAACT,GACnB,IAAIe,EAAWP,EAAWR,GACtBe,IAAavB,IACfuB,EAAWP,EAAWR,IAExBP,EAASsB,IAGX,OACE,kBAACzC,EAAD,KACIc,EAOA,kBAACX,EAAD,KACE,kBAACE,EAAD,gCACA,kBAACE,EAAD,KACE,uBAAGmC,UAAU,SAASxB,EAAMc,eAC5B,2BAAIhB,EAAU2B,KAAKX,gBAErB,6BACE,kBAACxB,EAAD,CAAQoC,QAAS,kBAAMhC,EAAY1B,WAAnC,oBAGA,kBAACsB,EAAD,CAAQoC,QAAS,kBAAMtB,MAAvB,gBAhBJ,kBAAClB,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAYyC,KAAM,GAAIC,MAAO,kBC7CzCC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,W","file":"static/js/main.0767a8dc.chunk.js","sourcesContent":["import React, { useContext, useState, createContext } from \"react\"\nimport { ThemeProvider } from \"styled-components\"\n\nconst ThemeToggleContext = createContext({\n  toggle: () => {},\n})\n\nexport const useThemeContext = () => useContext(ThemeToggleContext)\n\nconst CustomThemeProvider = ({ children }) => {\n  const [themeState, setThemeState] = useState({\n    mode: \"dark\",\n  })\n\n  const toggle = () => {\n    const mode = themeState.mode === \"light\" ? \"dark\" : \"light\"\n    setThemeState({ mode: mode })\n  }\n\n  return (\n    <ThemeToggleContext.Provider value={{ toggle: toggle }}>\n      <ThemeProvider\n        theme={{\n          mode: themeState.mode,\n        }}\n      >\n        <div>{children}</div>\n      </ThemeProvider>\n    </ThemeToggleContext.Provider>\n  )\n}\n\nexport default CustomThemeProvider\n","import theme from \"styled-theming\"\nimport \"./App.css\"\n\nexport const textColor = theme(\"mode\", {\n  light: \"blue\",\n  dark: \"red\",\n})\n\nexport const buttonBackgroundColor = theme(\"mode\", {\n  light: \"grey\",\n  dark: \"grey\",\n})\n","import React, { useState, useEffect } from \"react\"\nimport styled, { withTheme } from \"styled-components\"\nimport FadeIn from \"react-fade-in\"\nimport RingLoader from \"react-spinners/RingLoader\"\n\nimport \"./App.css\"\n\nimport { useThemeContext } from \"./ThemeContext\"\nimport { buttonBackgroundColor, textColor } from \"./theme\"\n\nimport data from \"./data.json\"\n\nconst App = (props) => {\n  const themeToggle = useThemeContext()\n\n  const [loading, setLoading] = useState(false)\n  const [character, setCharacter] = useState({})\n  const [quote, setQuote] = useState(\"\")\n\n  useEffect(() => {\n    setTimeout(() => setLoading(true), 3000)\n    randomQuote()\n  }, [props.theme.mode])\n\n  const randomQuote = () => {\n    selectForce(data.starWarsQuotes, props.theme.mode)\n  }\n\n  const selectForce = async (array, force) => {\n    let filterForce = array.filter((item) => item.force.toLowerCase() === force)\n    let characterSelect = randomItem(filterForce)\n    setCharacter(characterSelect)\n    selectQuote(characterSelect.quotes)\n  }\n\n  const randomItem = (array) => {\n    return array[Math.floor(Math.random() * array.length)]\n  }\n\n  const selectQuote = (array) => {\n    let newQuote = randomItem(array)\n    if (newQuote === quote) {\n      newQuote = randomItem(array)\n    }\n    setQuote(newQuote)\n  }\n\n  return (\n    <Wrapper>\n      {!loading ? (\n        <LoadingWrapper>\n          <FadeIn>\n            <RingLoader size={80} color={\"#FFE81F\"} />\n          </FadeIn>\n        </LoadingWrapper>\n      ) : (\n        <LoadedWrapper>\n          <Title>star wars quote machine</Title>\n          <Quote>\n            <p className=\"quote\">{quote.toLowerCase()}</p>\n            <p>{character.name.toLowerCase()}</p>\n          </Quote>\n          <div>\n            <Button onClick={() => themeToggle.toggle()}>\n              change the force\n            </Button>\n            <Button onClick={() => randomQuote()}>new quote!</Button>\n          </div>\n        </LoadedWrapper>\n      )}\n    </Wrapper>\n  )\n}\n\nconst Wrapper = styled.div`\n  height: 100vh;\n  width: 100%;\n  background-color: black;\n  background-image: url(https://starwarsblog.starwars.com/wp-content/uploads/2020/04/star-wars-backgrounds-25.jpg);\n  color: #ffe81f;\n\n  display: flex;\n  justify-content: center;\n`\n\nconst LoadedWrapper = styled.div`\n  width: fit-content;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  text-align: center;\n`\n\nconst LoadingWrapper = styled(LoadedWrapper)`\n  /* display: flex;\n  align-items: center;\n  justify-content: center; */\n  padding-top: 150px;\n`\n\nconst Title = styled.h1`\n  font-family: starwarsAlt;\n  font-size: 3em;\n`\n\nconst Quote = styled.div`\n  font-family: starwarsMain;\n  font-size: 1.8em;\n  padding: 0 30px;\n  box-shadow: ${textColor} 0px 0px 20px 2px;\n\n  .quote {\n    font-size: 1.5em;\n  }\n`\n\nconst Button = styled.button`\n  background-color: ${buttonBackgroundColor};\n  color: #ffe81f;\n  border: none;\n  border-radius: 0.3em;\n  box-shadow: none;\n  cursor: pointer;\n  font-size: 1.3em;\n  padding: 0.5em 1em;\n  margin: 1em;\n  margin-top: 3em;\n\n  font-family: starwarsMain;\n`\n\nexport default withTheme(App)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\n\nimport CustomThemeProvider from \"./ThemeContext\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <CustomThemeProvider>\n      <App />\n    </CustomThemeProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}